#!/usr/bin/env python3
# Licensed under a 3-clause BSD style license - see LICENSE.rst
import os
import sys
import argparse
import matplotlib.pyplot as plt
from astropy.time import Time
from zchecker import ZPhot, Config
from zchecker.cli_helpers import object_list

today = Time(Time.now().iso[:10])


def list_of(_type):
    def f(arg):
        return [_type(v) for v in arg.split(',')]


parser = argparse.ArgumentParser(
    description='Photometry for ZChecker data.')
parser.add_argument('--db', help='database file')
parser.add_argument('--log', help='log file')
parser.add_argument('--config', default='./zchecker.config',
                    help='configuration file')
parser.add_argument('-v', action='store_true', help='increase verbosity')

subparsers = parser.add_subparsers(help='sub-commands')


def measure(args):
    config = Config.from_args(args)
    with ZPhot(config, save_log=True) as z:
        z.photometry(objects=args.objects, update=args.force,
                     unc_limit=args.unc_limit)


parser_measure = subparsers.add_parser(
    'measure', help='measure photometry')
parser_measure.add_argument(
    'objects', type=object_list, nargs='?',
    help=('measure these targets, or those listed in this file'))
parser_measure.add_argument(
    '--force', '-f', action='store_true',
    help='remeasure previous photometry')
parser_measure.add_argument(
    '--unc-limit', type=float, default=5,
    help='ephemeris uncertainty limit')
parser_measure.set_defaults(func=measure)

########################################################################


def dump(args):
    config = Config.from_args(args)
    with ZPhot(config, save_log=True) as z:
        tab = z.get_phot(args.object, rap=[args.rap], unit=args.unit)
        tab.pprint(-1, -1)


parser_dump = subparsers.add_parser(
    'dump', help='dump photometry')
parser_dump.add_argument('object')
parser_dump.add_argument(
    '--rap', type=int, default=10000,
    help='limit to this radius')
parser_dump.add_argument(
    '--unit', default='km', choices=['km', 'pixel'],
    help='--rap unit')
parser_dump.set_defaults(func=dump)

########################################################################


def plot(args):
    config = Config.from_args(args)
    with ZPhot(config, save_log=False) as z:
        z.plot(args.object, args.rap, unit=args.unit)
        if args.o:
            plt.savefig(args.o)
        else:
            plt.show()


parser_plot = subparsers.add_parser(
    'plot', help='plot photometry')
parser_plot.add_argument(
    'object',  help='plot this target')
parser_plot.add_argument(
    '--rap', type=int, default=10000,
    help='aperture radius for plot')
parser_plot.add_argument(
    '-o', help='save to this file name')
parser_plot.add_argument(
    '--unit', default='km',
    help='aperture radius unit')
parser_plot.set_defaults(func=plot)

########################################################################
args = parser.parse_args()
try:
    getattr(args, 'func')
except AttributeError as e:
    parser.print_help()
    sys.exit()

try:
    args.func(args)
except Exception as e:
    if args.v:
        raise(e)
    else:
        print(str(e))
        sys.exit()
