#!/usr/bin/env python3
# Licensed under a 3-clause BSD style license - see LICENSE.rst
import sys
import argparse

import astropy.units as u
from astropy.time import Time
from astropy.table import Table

from zchecker import ZChecker, Config
from zchecker.config import _config_example
from zchecker.cli_helpers import object_list, as_time, args2orbit


def parse_date_range(start, stop, date, full=False):
    all_dates_none = all([x is None for x in
                          [args.date, args.start, args.stop]])
    if full:
        start = None
        stop = None
    elif all_dates_none:
        start = today
        stop = today
    elif date is not None:
        start = args.date
        stop = args.date

    if stop is not None:
        stop = stop + 1 * u.day  # search limit is end of the day

    return start, stop


def add_orbital_elements(parser):
    group = parser.add_argument_group('orbital parameters')
    group.add_argument(
        '-M', type=float, help='absolute magnitude')
    group.add_argument(
        '-K', type=float, help='heliocentric distance slope')
    group.add_argument(
        '-q', type=float, help='perihelion distance')
    group.add_argument(
        '-e', type=float, help='eccentricity')
    group.add_argument(
        '-i', type=float, help='inclincation')
    group.add_argument(
        '--argperi', '--omega', '-w', type=float,
        help='argument of perihelion')
    group.add_argument(
        '--node', '--Omega', '-W', type=float,
        help='longitude of the ascending node')
    group.add_argument(
        '--Tp', '--tp', help='perihelion epoch, TT')
    group.add_argument(
        '--epoch', help='epoch of the elements')
    return parser


# create the top-level parser
# Configuration file format should match the description in zchecker.config.
parser = argparse.ArgumentParser(prog='zchecker', description='ZTF small-body search tool.', epilog='''
Configuration file format:

{}
'''.format(_config_example), formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--db', help='database file')
parser.add_argument('--log', help='log file')
parser.add_argument('--config', default='./zchecker.config',
                    help='configuration file')
parser.add_argument('-v', action='store_true', help='increase verbosity')
subparsers = parser.add_subparsers(help='sub-commands')

today = Time(Time.now().iso[:10])

## SEARCH ############################################################


def search(args):
    start, stop = parse_date_range(args.start, args.stop, args.date,
                                   args.full)

    config = Config.from_args(args)
    save_log = not args.print
    with ZChecker(config, save_log=save_log) as z:
        if args.objects is None:
            objects = z.list_objects()['designation'].data
        else:
            objects = args.objects

        try:
            tab = z.find_objects(objects, start=start, stop=stop,
                                 vmax=args.vmax, save=(not args.print),
                                 update=args.update)
        except Exception as e:
            z.logger.error(str(e))
            raise e

        if args.print and tab is not None:
            tab.pprint(max_lines=-1, max_width=-1)


parser_search = subparsers.add_parser(
    'search', help='search ZTF fields in local database',
    epilog='Date format: YYYY-MM-DD.  Object designations must be in'
    ' the local database.')
parser_search.add_argument(
    'objects', type=object_list, nargs='?',
    help='file name listing one object per line, or a comma-separated'
    ' list of objects; default is to search all targets in the ephemeris'
    ' database defined over the requested date range')
parser_search.add_argument(
    '--print', action='store_true',
    help='print results; do not save to database')
parser_search.add_argument(
    '--update', action='store_true',
    help='update metadata for found objects already found')
mutex = parser_search.add_mutually_exclusive_group()
mutex.add_argument(
    '--full', action='store_true', help='search all available nights')
mutex.add_argument(
    '--date', type=as_time,
    help='search a single date, UT (default today)')
mutex.add_argument(
    '--start', type=as_time,
    help='search a range of dates, beginning with this date, UT')
parser_search.add_argument(
    '--stop', '--end', type=as_time,
    help='search a range of dates, ending with this date, UT')
parser_search.add_argument(
    '--vmax', type=float, default=23,
    help='skip epochs when object is fainter than vmax, mag')
parser_search.set_defaults(func=search)

## ONE_SHOT ############################################################


def one_shot(args):
    start = args.start
    stop = args.stop + 1 * u.day  # search limit is end of the day
    step = u.Quantity(args.step)
    epochs = {
        'start': start.iso[:10],
        'stop': stop.iso[:10],
        'step': step
    }

    c = {}
    if args.size:
        c['cutout size'] = args.size
    config = Config.from_args(args, **c)
    with ZChecker(config, save_log=False) as z:
        try:
            if args.source == 'orbit':
                orbit = args2orbit(args)

                if args.cutouts:
                    download = 'cutouts'
                elif args.fullframe:
                    download = 'fullframe'
                else:
                    download = None

                tab = z.find_by_orbit(args.object, orbit, download=download,
                                      start=start, stop=stop, step=step)
            else:
                eph = z.db.get_ephemeris_exact(
                    args.object, 'I41', epochs, source=args.source)
                obs, tab = z.find_by_ephemeris(eph)
        except Exception as e:
            z.logger.error(str(e))
            raise e

        tab.pprint(max_lines=-1, max_width=-1)


parser_one_shot = subparsers.add_parser(
    'one-shot', help='search ZTF fields on the fly',
    epilog=('Date format: YYYY-MM-DD.  Download option only available for'
            ' --source=orbit.'))
parser_one_shot.add_argument(
    'object',
    help='object designation')
parser_one_shot.add_argument(
    'start', type=as_time, help='search beginning with this date, UT')
parser_one_shot.add_argument(
    'stop', type=as_time, help='search ending with this date, UT')
parser_one_shot.add_argument(
    '--source', choices=['jpl', 'mpc', 'orbit'], default='jpl',
    help='base search on ephemerides from JPL, MPC, or orbit')
parser_one_shot.add_argument(
    '--step', default='1d', help='step size for ephemeris generation')
mutex = parser_one_shot.add_mutually_exclusive_group()
mutex.add_argument(
    '--cutouts', action='store_true', help='download cutouts')
mutex.add_argument(
    '--fullframe', action='store_true', help='download full-frame images')
parser_one_shot.add_argument(
    '--size', help='cutout size')
parser_one_shot = add_orbital_elements(parser_one_shot)
parser_one_shot.set_defaults(func=one_shot)


## PCCP ############################################################


def pccp(args):
    start = args.start
    stop = args.stop + 1 * u.day  # search limit is end of the day

    config = Config.from_args(args)
    if args.cutouts:
        download = 'cutouts'
    elif args.fullframe:
        download = 'fullframe'
    else:
        download = None

    with ZChecker(config, save_log=False) as z:
        try:
            tab = z.check_pccp(start=args.start, stop=args.stop,
                               download=download)
        except Exception as e:
            z.logger.error(str(e))
            raise e

        tab.pprint(max_lines=-1, max_width=-1)


parser_pccp = subparsers.add_parser(
    'pccp', help='search ZTF fields for PCCP objects',
    epilog='Date format: YYYY-MM-DD.')
parser_pccp.add_argument(
    'start', type=as_time, help='search beginning with this date, UT')
parser_pccp.add_argument(
    '--stop', '--end', type=as_time, default=today,
    help='search ending with this date, UT [default today]')
parser_pccp.add_argument(
    '--step', default='1d', help='step size for ephemeris generation')
mutex = parser_pccp.add_mutually_exclusive_group()
mutex.add_argument(
    '--cutouts', action='store_true', help='Download cutouts.')
mutex.add_argument(
    '--fullframe', action='store_true', help='Download full-frame images.')

parser_pccp.set_defaults(func=pccp)

# EPH-UPDATE ############################################################


def eph_update(args):
    stop = args.stop + 1 * u.day  # place limit at end of day
    config = Config.from_args(args)

    with ZChecker(config, save_log=True) as z:
        try:
            if args.last_update:
                rows = []
                for obj in args.objects:
                    date = z.db.get_last_ephemeris_update(obj)
                    rows.append({'object': obj, 'updated': date.iso[:10]})
            else:
                if args.clean:
                    z.clean_ephemeris(args.objects, args.start, stop)
                else:
                    z.update_ephemeris(args.objects, args.start, stop)
        except Exception as e:
            z.logger.error(str(e))
            raise e

    if args.last_update:
        print()
        Table(rows).pprint_all()


parser_eph = subparsers.add_parser(
    'eph-update', help='update local ephemeris database',
    aliases=['eph'], epilog='Date format: YYYY-MM-DD.')
parser_eph.add_argument(
    'objects', type=object_list,
    help='file name listing one object per line, or a comma-separated'
    ' list of objects, resolvable by JPL/Horizons')

update_group = parser_eph.add_argument_group()
update_group.add_argument(
    '--start', default=as_time('2017-10-15'), type=as_time,
    help='start date of ephemeris, UT')
update_group.add_argument(
    '--stop', '--end', default=as_time('2023-01-01'), type=as_time,
    help='stop date of ephemeris, UT')
update_group.add_argument(
    '--clean', action='store_true', help='delete from database')

mutex = parser_eph.add_mutually_exclusive_group()
mutex.add_argument_group(update_group)
mutex.add_argument(
    '--last-update', '-l', action='store_true',
    help='get date of last ephemeris update')
parser_eph.set_defaults(func=eph_update)

# CLEAN-EPH ############################################################


def clean_eph(args):
    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        try:
            z.clean_ephemeris(args.objects, start=args.start, stop=args.stop)
        except Exception as e:
            z.logger.error(str(e))
            raise e


parser_cleph = subparsers.add_parser(
    'clean-eph', help='clean local ephemeris database',
    epilog=('Date format: YYYY-MM-DD.  Date interval is inclusive.  '
            'Default is to remove the entire ephemeris.'))
parser_cleph.add_argument(
    'objects', type=object_list,
    help=('file name listing one object per line, or a comma-separated '
          'list of objects'))
parser_cleph.add_argument(
    '--start', type=as_time, help='start date of ephemeris to remove, UT')
parser_cleph.add_argument(
    '--stop', '--end', type=as_time, help='stop date of ephemeris to remove, UT')
parser_cleph.set_defaults(func=clean_eph)

# CLEAN-FOUND ############################################################


def clean_found(args):
    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        try:
            z.clean_found(args.objects, start=args.start, stop=args.stop)
        except Exception as e:
            z.logger.error(str(e))
            raise e


parser_found = subparsers.add_parser(
    'clean-found', help='clean found object database and data archive',
    epilog='Date format: YYYY-MM-DD.  Date interval is inclusive.  Default is to remove all findings.  Files in the cutouts directory will also be removed.')
parser_found.add_argument(
    'objects', type=object_list, nargs='?',
    help='file name listing one object per line, or a comma-separated'
    ' list of objects, must be resolvable by JPL/Horizons')
parser_found.add_argument(
    '--start', type=as_time, help='start date to remove, UT')
parser_found.add_argument(
    '--stop', '--end', type=as_time, help='stop date to remove, UT')
parser_found.set_defaults(func=clean_found)

# LIST-FOUND ############################################################


def list_found(args):
    start, stop = parse_date_range(args.start, args.stop, args.date,
                                   args.full)

    config = Config.from_args(args)
    with ZChecker(config, disable_log=True) as z:
        try:
            tab = z.summarize_found(objects=args.objects, start=start,
                                    stop=stop)
        except Exception as e:
            z.logger.error(str(e))
            raise e

    if tab:
        tab.pprint(max_lines=-1, max_width=-1)
    else:
        print('None')


parser_list_found = subparsers.add_parser(
    'list-found', help='list found objects', aliases=['found'],
    epilog='Date format: YYYY-MM-DD.  Date interval is inclusive.  '
    'Default is to list all objects from last night.  Files in the '
    'cutouts directory will also be removed.')
parser_list_found.add_argument(
    'objects', type=object_list, nargs='?',
    help='file name listing one object per line, or a comma-separated'
    ' list of objects, must be resolvable by JPL/Horizons')
mutex = parser_list_found.add_mutually_exclusive_group()
mutex.add_argument(
    '--full', action='store_true', help='list for available nights')
mutex.add_argument(
    '--date', type=as_time,
    help='list for a single date, UT (default today)')
mutex.add_argument(
    '--start', type=as_time,
    help='list a range of dates, beginning with this date, UT')
parser_list_found.add_argument(
    '--stop', '--end', type=as_time, help='ending with this date, UT')
parser_list_found.set_defaults(func=list_found)

# ZTF-UPDATE ############################################################


def ztf_update(args):
    start = args.start
    stop = args.stop
    date = args.date

    if date is None:
        date = today

    if start is None:
        start = date

    if stop is None:
        stop = date

    if start > stop:
        raise ValueError('Start date must occur before stop date.')

    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        while start <= stop:
            try:
                d = start.iso[:10]
                z.update_observations(d)
                start = start + 1 * u.day
            except Exception as e:
                z.logger.error(str(e))
                raise e


parser_ztf = subparsers.add_parser(
    'ztf-update', help='update local ZTF database', aliases=['ztf'])
parser_ztf.add_argument(
    '--date', type=as_time, help='retrieve observations for this date, UT')
parser_ztf.add_argument(
    '--start', type=as_time, help='start date to retrieve, UT')
parser_ztf.add_argument(
    '--stop', '--end', type=as_time, help='stop date to retrieve, UT')

parser_ztf.set_defaults(func=ztf_update)

# DOWNLOAD-CUTOUTS ######################################################


def download_cutouts(args):
    c = {}
    if args.size:
        c['cutout size'] = args.size
    if args.path:
        c['cutout path'] = args.path
    config = Config.from_args(args, **c)
    with ZChecker(config, save_log=True) as z:
        try:
            z.download_cutouts(
                objects=args.objects, clean_failed=args.clean_failed,
                retry_failed=args.retry_failed, missing_files=args.missing)
        except Exception as e:
            z.logger.error(str(e))
            raise e


parser_cutout = subparsers.add_parser(
    'download-cutouts', help='download cutouts.', aliases=['cutouts'])
parser_cutout.add_argument(
    'objects', nargs='?', type=object_list,
    help='download cutouts for these targets, or those in this file')
parser_cutout.add_argument(
    '--path', help='local cutout path')
parser_cutout.add_argument(
    '--leave-failed', dest='clean_failed', action='store_false',
    help='leave empty file after failed download')
mutex = parser_cutout.add_mutually_exclusive_group()
mutex.add_argument(
    '--retry-failed', action='store_true',
    help='retry previously failed science image syncs')
mutex.add_argument(
    '--missing', action='store_true',
    help='test integretiy of local file repository, download missing files')
parser_cutout.add_argument(
    '--size',
    help='cutout size')
parser_cutout.set_defaults(func=download_cutouts)

# LIST-NIGHTS ############################################################


def list_nights(args):
    config = Config.from_args(args)
    with ZChecker(config, disable_log=True) as z:
        try:
            tab = z.summarize_nights()
        except Exception as e:
            z.logger.error(str(e))
            raise e

    if tab is None:
        print(None)
    else:
        tab.pprint(max_lines=-1, max_width=-1)


parser_nights = subparsers.add_parser(
    'list-nights', help='summarize all ZTF nights saved to local database',
    aliases=['nights'])
parser_nights.set_defaults(func=list_nights)

# LIST-OBJECTS ############################################################


def list_objects(args):
    config = Config.from_args(args)
    with ZChecker(config, disable_log=True) as z:
        try:
            opts = dict(objects=args.objects, start=args.start, stop=args.stop)
            if args.eph:
                tab = z.summarize_object_coverage('eph', **opts)
            elif args.found:
                tab = z.summarize_object_coverage('found', **opts)
            else:
                tab = z.list_objects()

            for k, v in tab.meta.items():
                print('{}: {}'.format(k, v))

            tab.pprint(max_lines=-1, max_width=-1)
        except Exception as e:
            z.logger.error(str(e))
            raise e


parser_objects = subparsers.add_parser(
    'list-objects', aliases=['objects'],
    help=('list all objects in the local database with their ephemeris'
          'ranges, ephemeris coverage, or found object coverage'))
mutex = parser_objects.add_mutually_exclusive_group()
mutex.add_argument(
    '--eph', action='store_true', help='summarize ephemeris coverage')
mutex.add_argument(
    '--found', action='store_true',
    help='summarize objects')
parser_objects.add_argument(
    '--objects', type=object_list,
    help=('summarize these specific objects (comma-separated list or '
          'file name'))
parser_objects.add_argument(
    '--start', type=as_time, help='start date to search for coverage, UT')
parser_objects.add_argument(
    '--stop', '--end', type=as_time,
    help='stop date to search for coverage, UT')
parser_objects.set_defaults(func=list_objects)


# CLEAN_FILES ############################################################
def clean_files(args):
    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        z.clean_stale_files()


parser_clean_files = subparsers.add_parser(
    'clean-files',
    help='clean stale files from local archive',
    epilog='best to run after database manulation outside of zchecker')
parser_clean_files.set_defaults(func=clean_files)


# UPDATE_OBJECT ########################################################
def update_object(args):
    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        if args.rename:
            z.update_object(args.desg, args.new_desg)
        else:
            z.add_alternate_desg(args.desg, args.new_desg)


parser_update_desg = subparsers.add_parser(
    'update-object',
    help='rename object or add alternate designation')
parser_update_desg.add_argument(
    'desg', type=str, help='current object designation')
parser_update_desg.add_argument(
    'new_desg', type=str, help='new object designation')
parser_update_desg.add_argument(
    '--rename', action='store_true',
    help='make new_desg the primary for this object')
parser_update_desg.set_defaults(func=update_object)


# REMOVE_OBJECT ########################################################
def remove_object(args):
    config = Config.from_args(args)
    with ZChecker(config, save_log=True) as z:
        obj = z.db.resolve_object(args.desg)
        if obj[1] == args.desg:
            raise ValueError(
                'Removing primary designations is not supported.')
        z.remove_alternate_designation(args.desg)


parser_remove_object = subparsers.add_parser(
    'remove-object',
    help='remove alternative designation from database',
    epilog='removing primary designations is not supported')
parser_remove_object.add_argument(
    'desg', type=str, help='current object designation')
parser_remove_object.set_defaults(func=remove_object)


########################################################################

args = parser.parse_args()
try:
    getattr(args, 'func')
except AttributeError as e:
    parser.print_help()
    sys.exit()

try:
    args.func(args)
except Exception as e:
    if args.v:
        raise(e)
    else:
        print(str(e))
        sys.exit()
