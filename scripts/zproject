#!/usr/bin/env python3
# Licensed under a 3-clause BSD style license - see LICENSE.rst
import os
import argparse
import astropy.units as u
from zchecker import ZProject, Config
from zchecker.cli_helpers import object_list


parser = argparse.ArgumentParser(
    prog='zproject',
    description='ZTF image projection tool for the ZChecker archive.')

parser.add_argument('objects', type=object_list, nargs='?',
                    help='project images of these targets')
parser.add_argument('--force', '-f', action='store_true',
                    help='force projection, even if previously calculated')
parser.add_argument('--alignment', default='sangle',
                    choices=['sangle', 'vangle'],
                    help='alignment vector: sun or velocity vector')
parser.add_argument('--single', action='store_true',
                    help='run in single threaded mode')
parser.add_argument('--db', help='database file')
parser.add_argument('--log', help='log file')
parser.add_argument('--path', '--cutout-path', help='local cutout path')
parser.add_argument('--size', default='5arcmin',
                    help='angular size of projected images')
parser.add_argument('--config', default='~/.config/zchecker.config',
                    help='configuration file')
parser.add_argument('-v', action='store_true', help='increase verbosity')
args = parser.parse_args()

c = {}
if args.path:
    c['cutout path'] = args.path
with ZProject(Config.from_args(args, **c), save_log=True) as z:
    size = int(u.Quantity(args.size).to(u.arcsec).value)
    z.project(objects=args.objects, force=args.force,
              alignment=args.alignment, size=size, single=args.single)
