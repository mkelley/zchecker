#!/usr/bin/env python3
# Licensed under a 3-clause BSD style license - see LICENSE.rst
import os
import re
import argparse
from zchecker import ZStack, Config
from zchecker.cli_helpers import object_list


def date_string(date):
    if not re.match('^20[12][0-9]-[01][0-9]-[0-3][0-9]$', date):
        raise ValueError(
            'Bad date: {}; date format is YYYY-MM-DD.'.format(date))
    return date


parser = argparse.ArgumentParser(
    description='Solar System target image stacker for ZChecker.')
parser.add_argument(
    'objects', type=object_list, nargs='?',
    help=('find and stack these targets, or those listed in this file'))
parser.add_argument(
    '--start', type=date_string, help='starting date'
)
parser.add_argument(
    '--stop', '--end', type=date_string, help='ending date'
)
parser.add_argument(
    '--date', type=date_string, help='this date'
)
parser.add_argument(
    '--scale', default='coma', choices=['coma', 'surface', 'both'],
    help='image scaling basis')
parser.add_argument(
    '--baseline', default=14, type=int,
    help='number of days to search for creating baseline image')
parser.add_argument(
    '--force', '-f', action='store_true',
    help='overwrite previous stacks')
parser.add_argument(
    '--clean-missing', action='store_true',
    help='clean missing files from database')
parser.add_argument('--db', help='database file')
parser.add_argument('--log', help='log file')
parser.add_argument('--cutout-path', help='path to cutout directory')
parser.add_argument('--stack-path', help='path to stack directory')
parser.add_argument('--config', default='./zchecker.config',
                    help='configuration file')
parser.add_argument('-v', action='store_true', help='increase verbosity')

args = parser.parse_args()

assert args.scale in ['coma', 'surface', 'both']
if args.scale == 'both':
    scale_by = ['coma', 'surface']
else:
    scale_by = [args.scale]

if args.date is not None:
    start = args.date
    stop = args.date
else:
    start = args.start
    stop = args.stop

c = {}
if args.cutout_path:
    c['cutout path'] = args.cutout_path
if args.stack_path:
    c['stack path'] = args.stack_path
config = Config.from_args(args, **c)

with ZStack(config, save_log=True) as z:
    if args.clean_missing:
        z.clean_missing()
    else:
        z.stack(scale_by, args.baseline, objects=args.objects,
                restack=args.force, start=start, stop=stop)
